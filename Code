#include <RedBot.h>
#include <RedBotSoftwareSerial.h>
RedBotMotors motors;

RedBotEncoder encoder = RedBotEncoder(A2, 10);  // initializes encoder on pins A2 and 10
//int buttonPin = 12;
int countsPerRev = 192;   // 4 pairs of N-S x 48:1 gearbox = 192 ticks per wheel rev


void Drive(int inches);
void turnLeft();
void turnRight();

void function1();
void function2();
void function3();


void setup()
{



}

void loop(){}

//---------------------------------------FUNCTIONS-------------------------------------------------
//#################################################################################################
//-------------------------------------------------------------------------------------------------

void Drive(int inches){
  int ticks = inches * 25;   //distane to travel

  int lCount, rCount;       //distance traveled


  int rightSpeed = -120;
  int leftSpeed = 123;
  int turnSpeed = 80;


  encoder.clearEnc(BOTH);  // Reset the counters

    do {
      motors.rightMotor(rightSpeed);
      motors.leftMotor(leftSpeed);
      
      lCount = abs(encoder.getTicks(LEFT));    // read the left motor encoder
      rCount = abs(encoder.getTicks(RIGHT));   // read the right motor encoder
    
    } while((lCount <= ticks) && (rCount <= ticks));

    motors.brake();

    delay(100);       //REDUCE DELAY ----------------------------------------------------------
}

void turnLeft() {

  int ticks = 90;

  int lCount, rCount;       //distance traveled

  int turnSpeed = -80;



  encoder.clearEnc(BOTH);  // Reset the counters


  do {
      motors.rightMotor(turnSpeed);
      motors.leftMotor(turnSpeed);
      
    // store the encoder counts to a variable.
    lCount = abs(encoder.getTicks(LEFT));    // read the left motor encoder
    rCount = abs(encoder.getTicks(RIGHT));   // read the right motor encoder

    } while ((lCount <= ticks) && (rCount <= ticks));

    motors.brake();

    delay(100);   //REDUCE DELAY -------------------------------------------------------------

}

void turnRight() {

  int ticks = 90;

  int lCount, rCount;       //distance traveled

  int turnSpeed = 80;



  encoder.clearEnc(BOTH);  // Reset the counters


  do {
      motors.rightMotor(turnSpeed);
      motors.leftMotor(turnSpeed);
      
    // store the encoder counts to a variable.
    lCount = abs(encoder.getTicks(LEFT));    // read the left motor encoder
    rCount = abs(encoder.getTicks(RIGHT));   // read the right motor encoder

    } while ((lCount <= ticks) && (rCount <= ticks));

    motors.brake();

    delay(100);   //REDUCE DELAY -------------------------------------------------------------

}


void function1() {

  bool forwardDistance = true;    //true == room to Drive

  if (checkDistance() < 24.0) {
    forwardDistance = false;
  }

  while(forwardDistance) {
    Drive(24);    //drive forward

    checkSide();  //check side distance

    if (checkDistance() > 24.0) {
      forwardDistance = false;
    }
  }
}

void function3() {
  


}