#include <RedBot.h>
#include <RedBotSoftwareSerial.h>
RedBotMotors motors;

RedBotEncoder encoder = RedBotEncoder(A2, 10);  // initializes encoder on pins A2 and 10
//int buttonPin = 12;
int countsPerRev = 192;   // 4 pairs of N-S x 48:1 gearbox = 192 ticks per wheel rev


void setup()
{

  delay(3000);

    

    motors.brake();
    delay(500);


    encoder.clearEnc(BOTH);  // Reset the counters.
    delay(100);
    

    

    motors.brake();
    delay(500);
  }

}

void loop(){}


void Drive(int feet){
  int ticks = feet * 300;   //distane to travel

  int lCount, rCount;       //distance traveled


  int rightSpeed = -120;
  int leftSpeed = 123;
  int turnSpeed = 80;


  encoder.clearEnc(BOTH);  // Reset the counters.

    do {
      motors.rightMotor(rightSpeed);
      motors.leftMotor(leftSpeed);
      
      lCount = abs(encoder.getTicks(LEFT));    // read the left motor encoder
      rCount = abs(encoder.getTicks(RIGHT));   // read the right motor encoder
      
      // print out to Serial Monitor the left and right encoder counts.
      Serial.print(lCount);
      Serial.print("\t");
      Serial.println(rCount);
    } while((lCount <= ticks) && (rCount <= ticks));

    motors.brake();

    delay(100);       //REDUCE DELAY ----------------------------------------------------------
}

void turn(char direction) {     //r for Right. l for Left

  int ticks = 90;

  int lCount, rCount;       //distance traveled

  int turnSpeed = 0;

  if (direction == r) {
    turnSpeed = 80;
  }
  else () {
    turnSpeed = -80;
  }


  encoder.clearEnc(BOTH);  // Reset the counters.


  do {
      motors.rightMotor(turnSpeed);
      motors.leftMotor(turnSpeed);
      
    // store the encoder counts to a variable.
    lCount = abs(encoder.getTicks(LEFT));    // read the left motor encoder
    rCount = abs(encoder.getTicks(RIGHT));   // read the right motor encoder

      // print out to Serial Monitor the left and right encoder counts.
      Serial.print(lCount);
      Serial.print("\t");
      Serial.println(rCount);
    } while ((lCount <= ticks) && (rCount <= ));

    motors.brrake();

    delay(100);   //REDUCE DELAY -------------------------------------------------------------

}