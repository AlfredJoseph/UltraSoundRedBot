#include <RedBot.h>
#include <RedBotSoftwareSerial.h>
RedBotMotors motors;

RedBotEncoder encoder = RedBotEncoder(A2, 10);  // initializes encoder on pins A2 and 10
//int buttonPin = 12;
int countsPerRev = 192;   // 4 pairs of N-S x 48:1 gearbox = 192 ticks per wheel rev

const int pwPin = A4;
int pulse;
long inches;



void Drive(int inches);
void turnLeft();
void turnRight();
void turnRightBox();

long checkDistance();
long checkSide();
int checkSideReturn();

int function1();
void function2();
void function3();


void setup()
{
int driveAfterBox;
  
  delay(3000);
  
  int distCheck = function1();

   if (distCheck < 12)     {  driveAfterBox = 26;  }
  else if (distCheck < 24) {  driveAfterBox = 15;  }
  else                     {  driveAfterBox = 10;  }

  turnRightBox();
    
  Drive(driveAfterBox);

  motors.brake();

  //function2();

  turnLeft();
  
  function3();

  delay(500);

  motors.drive(100);
  delay(500);
  motors.drive(-100);
  delay(500);
  motors.brake();

  function3();
}

void loop(){    /*intentionally empty*/    }

//---------------------------------------FUNCTIONS-------------------------------------------------
//#################################################################################################
//-------------------------------------------------------------------------------------------------

void Drive(int inches){
  int ticks = inches * 25;   //distane to travel

  int lCount, rCount;       //distance traveled


  int rightSpeed = -126;
  int leftSpeed = 128;
  int turnSpeed = 80;
  if (ticks < 0) {
    leftSpeed = -leftSpeed;
    rightSpeed = -rightSpeed;
    ticks = -ticks;
  }
  
  encoder.clearEnc(BOTH);  // Reset the counters

    do {
      motors.rightMotor(rightSpeed);
      motors.leftMotor(leftSpeed);
      
      lCount = abs(encoder.getTicks(LEFT));    // read the left motor encoder
      rCount = abs(encoder.getTicks(RIGHT));   // read the right motor encoder
    
    } while((lCount <= ticks) && (rCount <= ticks));

    motors.brake();

    delay(100);       //REDUCE DELAY ----------------------------------------------------------
}

void turnLeft() {

  int ticks = 102;

  int lCount, rCount;       //distance traveled

  int turnSpeed = -80;



  encoder.clearEnc(BOTH);  // Reset the counters


  do {
      motors.rightMotor(turnSpeed);
      motors.leftMotor(turnSpeed);
      
    // store the encoder counts to a variable.
    lCount = abs(encoder.getTicks(LEFT));    // read the left motor encoder
    rCount = abs(encoder.getTicks(RIGHT));   // read the right motor encoder

    } while ((lCount <= ticks) && (rCount <= ticks));

    motors.brake();

    delay(100);   //REDUCE DELAY -------------------------------------------------------------

}

void turnRight() {

  int ticks = 115;

  int lCount, rCount;       //distance traveled

  int turnSpeed = 80;



  encoder.clearEnc(BOTH);  // Reset the counters


  do {
      motors.rightMotor(turnSpeed);
      motors.leftMotor(turnSpeed);
      
    // store the encoder counts to a variable.
    lCount = abs(encoder.getTicks(LEFT));    // read the left motor encoder
    rCount = abs(encoder.getTicks(RIGHT));   // read the right motor encoder

    } while ((lCount <= ticks) && (rCount <= ticks));

    motors.brake();

    delay(100);   //REDUCE DELAY -------------------------------------------------------------

}

void turnRightBox() {

  int ticks = 115;

  int lCount, rCount;       //distance traveled

  int turnSpeed = 80;



  encoder.clearEnc(BOTH);  // Reset the counters


  do {
      motors.rightMotor(turnSpeed);
      motors.leftMotor(turnSpeed);
      
    // store the encoder counts to a variable.
    lCount = abs(encoder.getTicks(LEFT));    // read the left motor encoder
    rCount = abs(encoder.getTicks(RIGHT));   // read the right motor encoder

    } while ((lCount <= ticks) && (rCount <= ticks));

    motors.brake();

    delay(100);   //REDUCE DELAY -------------------------------------------------------------

}

long checkDistance() {
    pulse = pulseIn(pwPin, HIGH);
    inches = pulse / 147;

    return inches;
}
    
long checkSide() {
    turnLeft();
    checkDistance();
    
    while (checkDistance() > 18.0) {
      Drive(6.0);
      }
    
    while (checkDistance() < 7.0) {
      Drive(-6.0);
    }
    
     turnRight();
}

int checkSideReturn() {
    turnLeft();
    checkDistance();

    int counter = 0;
    
    while (checkDistance() > 18.0) {
      Drive(6.0);
      counter++;
      }
    
    while (checkDistance() < 7.0) {
      Drive(-6.0);
    }
    
     turnRight();

     return counter;
}


int function1() {

  bool forwardDistance = true;    //true == room to Drive
  int dist;

  if (checkDistance() < 24.0) {
    forwardDistance = false;
  }

  while(forwardDistance) {
    Drive(18);    //drive forward

    dist = checkSide();  //check side distance

    if (checkDistance() < 24.0) {
      forwardDistance = false;
    }
  }

  return dist;
}

void function2 () {

  bool LeftSide = true;   //true if there is something to the left
  
  while (LeftSide == true) {
    Drive(12);

    checkSide();
    
    if (checkSide() > 5.0) {
        LeftSide == false;
    }
  }
  
  motors.brake();
}

void function3() {

  int ticks = 200;

  int lCount, rCount = 0;

  int count = 0;
  
  do {
    Drive(20);

    lCount, rCount = 0;
    
    encoder.clearEnc(BOTH);   //Reset the counters

    lCount = abs(encoder.getTicks(LEFT));    // read the left motor encoder
    rCount = abs(encoder.getTicks(RIGHT));   // read the right motor encoder

    count = checkSideReturn();

    if (count >= 2) {
      break;
      lCount = 2000;
    }

  } while ((lCount <= ticks) && (rCount <= ticks));
}
